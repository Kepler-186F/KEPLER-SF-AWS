<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-09T11:38:15-06:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Are There So Many Songs About Rainbow? ---My Journey as an Audiophile]]></title>
    <link href="http://yoursite.com/blog/2015/11/08/review%20earphone%20equipment/"/>
    <updated>2015-11-08T22:42:22-06:00</updated>
    <id>http://yoursite.com/blog/2015/11/08/review earphone equipment</id>
    <content type="html"><![CDATA[<p>So why to become am audiophile?</p>

<p>As a person watching computer screen all day, researching audio equipment (earphone headphone) is one of only few hobbies that I have. To investing on them is easily proven to be cost-efficent: I listen to them while I use computer, which is pretty much all day. Anyways, it&rsquo;s been 5 years since I stepped into this once-step-in-no-step-back hi-fi journey. I decided to write something to wrap them up and give beginners some advices.</p>

<p>So why earphone?</p>

<p>As a way of enjoying sound, first off you have some options. You may go one of these three: speakers(those loud speaker boxes), headphones or earphones. First speaker is no brainer not an option for me, they are heavy to move and I can&rsquo;t use them in office. Headphones are also bad because some open back ones leaks sound pretty bad which I also can not use in office. Ideally the one I&rsquo;m looking for is something supper low-profile and not compromising hi-fidelity at the same time.</p>

<p>Journey of Sennheiser CX300</p>

<p>My journey starts from Sennheiser CX300, an earphone that designed for entry-level users. Even though my first CX300 turn out to be not an authentic one from Sennheiser, but it sounded just amazing, as I have no other to compare, and it opened a door for me to this aspiring hi-fidelity world. That one costs me about 40 bucks, which was quite a lot for me at that moment as a junior undergraduate. My biggest impressions were great isolation and surrounding feeling. Never before has a earphone feels so comfortable and so sound-isolating that after wearing it for a while, you magically feel the sound volume somehow gets turned up. Great isolation also leads to great surrounding feeling enriching any song with so much flavor and imaging.</p>

<p>->for beginners: In general at this price range(Less than $50), you are expecting some major improvement compare to apple&rsquo;s earbuds. The ecstasy of trance begin to appear, and you will find yourself quite enjoying from the repetition of those trances in a music.</p>

<p>It is still in general horrible, for pretty much all earphones at this range, to handle classics or jazz. But for popular music and some vocals, this range is a great start. Recommend: Xiaomi Piston 2.(great great earphone at this range kind of overkills all others)</p>

<p>Journey of Sennheiser IE6</p>

<p>When I was still at Iowa doing my college program, one day at Cyber Monday I saw Sennheiser IE6 was list as a lighting-deal, pricing at $99. Therefore that soon became my second milestone on earphones. I have been marrying IE 6 for about 2 years straight. Hands down great earphones. I would&rsquo;ve continue use then if not their cable finally worn out and I failed to fix them after couple tries. IE is a class that designed for audiophiles, and IE6 is an entry-level of that class.</p>

<p>->for beginners: At this price range ($50 - $200), there are a bunch of great earphones or headphones that are available. You will feel they are 1 to 2 level better than the previous price range, specially when comes down to fidelity and balance. They are considered &lsquo;sub-flagships&rsquo; and is in my view the most cost-efficent price range to stay on. However compare to the flagships (IE 8, SE535, EX1000 etc), they more or less has one or two flaws regarding bass, mid-range or treble.</p>

<p>At this point they usually handle very well at popular music. Some maybe good at one particular genre than others, such as vocals or ACGs. Still, most are struggling at classics and jazz. Recommend: SE215, ATH M50x(it&rsquo;s a headphone).</p>

<p>Journey of Shure SE535</p>

<p>Then comes SE535. In a word, I regret having bought it. Unlike my every other upgrades, which I usually felt satisfying and sense of accomplishments afterwards, the purchase of SE535 however was a disaster. She impressed me by a lot at first, then left me craving for more. For the starters, SE535 has a great fidelity, which means lots of details. It enables me to notice much more details that I wasn&rsquo;t aware of, even from a song that I was looping all day long. The best of SE535 was her mid-range. Those &lsquo;pure liquid gold&rsquo; was just incredible. This earphone made me think, the ultimate goal of audiophile, rather than to pursue those hard specs, is to &lsquo;find yourself being moved&rsquo;. When listening Tori Kelly was singing Colors of the wind, or when V.K was in the middle performing his piano solo Reflection, SE535 made me realize, after all, at its core, the music is an art of expressing feelings. And to accomplish this connection between listener and performer you will have to also involve your imagination&hellip;..SE535 gives you all that. She not only precisely captures the music structures and every other details, it blends them all into a poem or a story. This magic earphone forced me to ignore every individual instruments, but to focus on performer&rsquo;s enthusiasm that deep inside. As a result, I feel Tori Kelly&rsquo;s voice was so real that her lip were literally 1 inch away from my ear. It&rsquo;s addictive. It&rsquo;s almost a guilty pleasure.</p>

<p>Now, here is deal breaker. Besides middle range and vocals, everything else about SE535 is depressing. Specially when comes down to sound stage. The bass and treble is just OMG bad. Till one day I decide not to tolerate those anymore and I moved on.</p>

<p>->for beginners: At this price range($200 - $600), you will have to do a major study regarding the genre you usually listen to. There are SE535, IE 8, TF 10, Sony EX1000 and ATH CK100 etc. If you are looking for something that is a versatile, slightly analytical and well balanced, my recommendation is Westone W4R.</p>

<p>My current Stuff.
HD600, HD800, LCD 2.
AKG K701, JH13Pro, DAC/Amp Audist HUD MX1, Pico Slim, Fiio E8</p>

<p>Some pictures. And I will keep updating.</p>

<p><img src="http://yoursite.com/images/img/1.jpg">
<img src="http://yoursite.com/images/img/2.jpg">
<img src="http://yoursite.com/images/img/3.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Micro-services Template]]></title>
    <link href="http://yoursite.com/blog/2015/11/07/micro%20service%20template/"/>
    <updated>2015-11-07T10:24:22-06:00</updated>
    <id>http://yoursite.com/blog/2015/11/07/micro service template</id>
    <content type="html"><![CDATA[<p>This post wrap up a hello-world demo for django Microservices web app, and shold serve well as a template.</p>

<p>First, What is Pattern: Microservices Architecture:</p>

<p>refer below from <a href="http://microservices.io/patterns/microservices.html">http://microservices.io/patterns/microservices.html</a></p>

<p>Context
You are developing a server-side enterprise application. It must support a variety of different clients including desktop browsers, mobile browsers and native mobile applications. The application might also expose an API for 3rd parties to consume. It might also integrate with other applications via either web services or a message broker. The application handles requests (HTTP requests and messages) by executing business logic; accessing a database; exchanging messages with other systems; and returning a HTML/JSON/XML response.</p>

<p>The application has either a layered or hexagonal architecture and consists of different types of components:</p>

<p>Presentation components - responsible for handling HTTP requests and responding with either HTML or JSON/XML (for web services APIS)
Business logic - the application’s business logic
Database access logic - data access objects responsible for access the database
Application integration logic - messaging layer, e.g. based on Spring integration.
There are logical components corresponding to different functional areas of the application.</p>

<p>The motivations are :</p>

<p>There is a team of developers working on the application
New team members must quickly become productive
The application must be easy to understand and modify
You want to practice continuous deployment of the application
You must run multiple copies of the application on multiple machines in order to satisfy scalability and availability requirements
You want to take advantage of emerging technologies (frameworks, programming languages, etc)</p>

<p>So what is Microservice Architecture:
<img src="http://yoursite.com/images/img/4.jpg"></p>

<p>Reference ends here. Now start my demo code. Below is how I plan to do it:
<img src="http://yoursite.com/images/img/5.png"></p>

<p>Tier one app. It&rsquo;s an empty app, only has Settings.py and url.py is important. You start your whole application by bootstraping this app python manage.py runserver from here.</p>

<p>settings.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSTALLED_APPS = (
</span><span class='line'>    'django.contrib.admin',
</span><span class='line'>    'django.contrib.auth',
</span><span class='line'>    'django.contrib.contenttypes',
</span><span class='line'>    'django.contrib.sessions',
</span><span class='line'>    'django.contrib.messages',
</span><span class='line'>    'django.contrib.staticfiles',
</span><span class='line'>    'keplerapp_tbcheck',
</span><span class='line'>    'keplerapp_tbmodel',
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>url.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns = patterns('',
</span><span class='line'>    # Examples:
</span><span class='line'>    # url(r'^$', 'keplerweb.views.home', name='home'),
</span><span class='line'>    # url(r'^blog/', include('blog.urls')),
</span><span class='line'>    url(r'^demo/', include(keplerapp_tbcheck.urls)),
</span><span class='line'>    url(r'^$', include(keplerapp_tbcheck.urls)),
</span><span class='line'>    url(r'^admin/', include(admin.site.urls)),
</span><span class='line'>    #url(r'^$', include(admin.site.urls))
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Now go to another tier one app, tbcheck. This app serves as view app, with all template, tamplate tag, css stuff there
url.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns = patterns('',
</span><span class='line'>    url(r'', 'keplerapp_tbcheck.views.service_check'),
</span><span class='line'>    url(r'template', 'keplerapp_tbcheck.views.service_default')
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>views.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from keplerapp_tbmodel.models import Employee
</span><span class='line'>
</span><span class='line'>def service_check(request):
</span><span class='line'>    emp = Employee()
</span><span class='line'>    emp.truncate()
</span><span class='line'>    emp.prepare_data()
</span><span class='line'>
</span><span class='line'>    sec_orglist = map(lambda x:x.EmpName,emp.get_Name_by_OrgID(2))
</span><span class='line'>
</span><span class='line'>    context={}
</span><span class='line'>    context['sec_orglist']=sec_orglist
</span><span class='line'>    context['dictionary_key_A']='value of dictionary key A: 10230'
</span><span class='line'>    return render_to_response('keplerapp_tbcheck/intro_index.html', context)
</span><span class='line'>
</span><span class='line'>def service_default(request):
</span><span class='line'>    #return HttpResponse("defalt page 404")
</span><span class='line'>    return render_to_response('keplerapp_tbcheck/intro_index.html', {})</span></code></pre></td></tr></table></div></figure>


<p>At last is tier two app. tbmodel</p>

<p>Only has models.py in it. It is just another package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django.db import models
</span><span class='line'>from datetime import datetime
</span><span class='line'>
</span><span class='line'>class Employee(models.Model):
</span><span class='line'>  EmpID = models.AutoField(primary_key=True,blank=True)
</span><span class='line'>  OrgId = models.CharField(max_length=50, db_index=True)#PNC
</span><span class='line'>  EmpLevelCode = models.IntegerField(db_index=True,blank=True,null=True)#6
</span><span class='line'>  EmpName = models.CharField(max_length=100)#Gender
</span><span class='line'>  EmpGender = models.CharField(max_length=50,blank=True,null=True)#F
</span><span class='line'>  EmpHire_dttm = models.DateTimeField(blank=True,null=True)
</span><span class='line'>  upd_dttm = models.DateTimeField(auto_now=True)
</span><span class='line'>
</span><span class='line'>  def __unicode__(self):
</span><span class='line'>      return u'System: %s'%self.EmpName
</span><span class='line'>
</span><span class='line'>  class Meta:
</span><span class='line'>      app_label = 'keplerapp_tbmodel'
</span><span class='line'>      db_table = u'employee'
</span><span class='line'>
</span><span class='line'>  #Return a Generic object
</span><span class='line'>  @classmethod
</span><span class='line'>  def get_Name_by_EmpID(cls,EmpID):
</span><span class='line'>      return cls.objects.filter(EmpID=EmpID)
</span><span class='line'>
</span><span class='line'>  @classmethod
</span><span class='line'>  def get_Name_by_OrgID(cls,OrgId):
</span><span class='line'>      return cls.objects.filter(OrgId=OrgId)
</span><span class='line'>
</span><span class='line'>  @classmethod
</span><span class='line'>  def truncate(cls):
</span><span class='line'>      cls.objects.all().delete()
</span><span class='line'>
</span><span class='line'>  @classmethod
</span><span class='line'>  def prepare_data(cls):
</span><span class='line'>      Employee(OrgId='2',EmpLevelCode=1,EmpName='Ethan W').save()
</span><span class='line'>      Employee(OrgId='2',EmpLevelCode=1,EmpName='Tom H').save()
</span><span class='line'>      Employee(OrgId='2',EmpLevelCode=2,EmpName='Eric G').save()
</span><span class='line'>      Employee(OrgId='3',EmpLevelCode=1,EmpName='Larry E').save()
</span><span class='line'>      Employee(OrgId='3',EmpLevelCode=2,EmpName='Larry P').save()</span></code></pre></td></tr></table></div></figure>


<p>now when we run it, we first pip install all view, model app as package to site-package places. Then bootstrap the first app to start.</p>

<p>To access code and see hello world in 5 sec, just go to this link:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://github.com/Template-EthanFavoriate/TEMPLATE_MICROSERVICE
</span><span class='line'>git@github.com:Template-EthanFavoriate/TEMPLATE_MICROSERVICE.git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Did Preformance Go? Dive Into Multi-process/multi-threads in CPython]]></title>
    <link href="http://yoursite.com/blog/2015/06/22/Where%20did%20preformance%20go/"/>
    <updated>2015-06-22T15:31:14-05:00</updated>
    <id>http://yoursite.com/blog/2015/06/22/Where did preformance go</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been run in to this kind of problem recently: one day I found out a solution written in python multi-thread approach take more running time than single thread. This is really confusing. I decided to dive into that&hellip;and some interesting stuff were found out.</p>

<p>Note that my computer is multi-core processor cpu. i7 2.3Ghz QuardCore CPU, 16G DDR3 Memory. With SSD Hard Drive.</p>

<p>Essentially every thing starts from this little piece of code recursively solving a permutation problem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/python
</span><span class='line'>import datetime
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>L = [1,2,3,4,5,7,8,9,10,11]
</span><span class='line'>
</span><span class='line'>def gen(index,value):
</span><span class='line'>  if index==len(L):
</span><span class='line'>      return 1
</span><span class='line'>  count=0
</span><span class='line'>  for i in range(len(value)+1):
</span><span class='line'>      count+=gen(index+1,value[:i]+[L[index]]+value[i:])
</span><span class='line'>  return count</span></code></pre></td></tr></table></div></figure>


<p>Below are how it was wroted in single thread, multi-thread and multi-process. Along with the running time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>#Single thread approach
</span><span class='line'>#time0=datetime.datetime.now()
</span><span class='line'>#print gen(1,[1]) #runtime 480ms-10   4500ms-11  50sec-12 11&gt;&gt;&gt;&gt;&gt;0:00:04.823974
</span><span class='line'>#time1=datetime.datetime.now()
</span><span class='line'>#print time1-time0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>pointer1=0
</span><span class='line'>pointer2=0
</span><span class='line'>def t1_start():
</span><span class='line'>  global pointer1
</span><span class='line'>  pointer1=gen(2,[2,1])
</span><span class='line'>  print pointer1
</span><span class='line'>
</span><span class='line'>def t2_start():
</span><span class='line'>  global pointer2
</span><span class='line'>  pointer2=gen(2,[1,2])
</span><span class='line'>  print pointer2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#from threading import Thread
</span><span class='line'>#t1=Thread(target=t1_start,args=())
</span><span class='line'>#t2=Thread(target=t2_start,args=())
</span><span class='line'>#time0=datetime.datetime.now()
</span><span class='line'>#t1.start()
</span><span class='line'>#t2.start()
</span><span class='line'>#t1.join()
</span><span class='line'>#t2.join()
</span><span class='line'>#time1=datetime.datetime.now()
</span><span class='line'>#print pointer1+pointer2,time1-time0 #runtime 650ms-10  6392ms-11 72sec -12 11&gt;&gt;&gt;&gt;&gt;&gt;&gt;0:00:05.082194
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>import multiprocessing
</span><span class='line'>p1=multiprocessing.Process(target=t1_start,args=())
</span><span class='line'>p2=multiprocessing.Process(target=t2_start,args=())
</span><span class='line'>time0=datetime.datetime.now()
</span><span class='line'>p1.start()
</span><span class='line'>p2.start()
</span><span class='line'>p1.join()
</span><span class='line'>p2.join()
</span><span class='line'>time1=datetime.datetime.now()
</span><span class='line'>print pointer1+pointer2,time1-time0 #runtime 480ms-10 4400ms-11 48sec-12   &gt;&gt;&gt;&gt;&gt;&gt;&gt;02.225561
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<p>Also, I simply increased the task from 10 digit array to 12 digit array, this takes roughly 1 min for the node to solve the problem. so the new result is this: single thread: 50 sec; multi-thread: 72 sec. I also tried implement it using multi-process. surprisingly multi-process cut the time in half. so the basically result is:</p>

<p>single thread  RUNTIME T
multi-thread   RUNTIME T
multi-process  RUNTIME T/2</p>

<p>This does not explain why there is no improvement from single thread to multi-threads. therefore I took a snapshot of CPU workload.
<img src="http://yoursite.com/images/img/CPU_History.jpg"></p>

<p>Note that even single thread it actually involves all my cpu cores. I&rsquo;m now suspecting maybe CPython interpreter/optimizer or Intel CPU instruction set is pretty smart to handle even single thread solution to force it run on multiple CPUs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standard DFS and BFS]]></title>
    <link href="http://yoursite.com/blog/2015/06/20/DFS%20BFS/"/>
    <updated>2015-06-20T15:31:14-05:00</updated>
    <id>http://yoursite.com/blog/2015/06/20/DFS BFS</id>
    <content type="html"><![CDATA[<p>given a graph below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/python
</span><span class='line'>
</span><span class='line'>graph={}
</span><span class='line'>
</span><span class='line'>graph['A']=['B','D']
</span><span class='line'>graph['B']=['A','E','C']
</span><span class='line'>graph['C']=['B']
</span><span class='line'>graph['D']=['A','E']
</span><span class='line'>graph['E']=['B','D']</span></code></pre></td></tr></table></div></figure>


<p>To traverse this simple graph, usually people go on and on talking about DFS and BFS, and there are many versions of algorithm book 101 talk about the way of implementing it. Today I got asked again by a colleague, and after search around online surprisingly I found there is a no good example anywhere that set a standard for beginners to start. Therefore I coded one for him. And it was pretty tricky since there are some caveat need be take into consideration. I decided to post that here so that it can benefit other people who might need it.</p>

<p>Start with this DFS. I call it classic-DFS
This gives the good DFS: It Ends when All NODE ARE VISITED</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def DFS(node):
</span><span class='line'>  print node,visited
</span><span class='line'>  for next in graph[node]:
</span><span class='line'>      if next not in visited:
</span><span class='line'>          visited.append(next)
</span><span class='line'>          DFS(next)
</span><span class='line'>          print 'returnning'
</span><span class='line'>visited=['A']
</span><span class='line'>DFS('A')</span></code></pre></td></tr></table></div></figure>


<p>This one is difference than the one above, it gives all possible path DFS: it ends when ALL PATH ARE SEARCHED.
It also very good for circle detecting. I call it standard DFS or S-DFS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def SDFS(node):
</span><span class='line'>  print node,stack
</span><span class='line'>  for next in graph[node]:
</span><span class='line'>      if next not in stack:
</span><span class='line'>          stack.append(next)
</span><span class='line'>          SDFS(next)
</span><span class='line'>          stack.pop()
</span><span class='line'>          print 'returnning'
</span><span class='line'>#     elif next in stack and next &lt;&gt; stack[-2]:
</span><span class='line'>#         print 'circle!'
</span><span class='line'>
</span><span class='line'>stack=['A']
</span><span class='line'>SDFS('A')</span></code></pre></td></tr></table></div></figure>


<p>Now this one is a BFS one. it is very straight forward.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def BFS(node):
</span><span class='line'>  global Q
</span><span class='line'>  print node,Q
</span><span class='line'>  for next in graph[node]:
</span><span class='line'>      if next not in visted:
</span><span class='line'>          Q.append(next)
</span><span class='line'>          visited.append(next)
</span><span class='line'>  Q=Q[1:]
</span><span class='line'>  while len(Q)&gt;0:
</span><span class='line'>      next=Q[0]
</span><span class='line'>      BFS(next)
</span><span class='line'>
</span><span class='line'>Q=['A']
</span><span class='line'>visited=['A']
</span><span class='line'>#BFS('A')</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Octpress]]></title>
    <link href="http://yoursite.com/blog/2013/01/15/hello-world/"/>
    <updated>2013-01-15T14:19:22-06:00</updated>
    <id>http://yoursite.com/blog/2013/01/15/hello-world</id>
    <content type="html"><![CDATA[<p>To relase me:</p>

<p>rysnc then at my root fold do rake genrate rake watch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake watch</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Comments Regarding Spring vs Rails]]></title>
    <link href="http://yoursite.com/blog/2011/05/27/SpringVsRails/"/>
    <updated>2011-05-27T04:00:04-05:00</updated>
    <id>http://yoursite.com/blog/2011/05/27/SpringVsRails</id>
    <content type="html"><![CDATA[<p>For the starters, couple reasons that Spring is better than Ruby on Rails.
Reason1: Routes Service - Complex routers
Ruby on Rails
Given link:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%a{:href =&gt; export_path} Export_Link</span></code></pre></td></tr></table></div></figure>


<p>/config/routes.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   match ‘/export’ =&gt; ‘PatientController#exportservice’
</span><span class='line'>$rake routes:
</span><span class='line'>export /export(.:format) {:controller=&gt;”PatientController”, :action=&gt; ”export”}
</span><span class='line'>/app/controller/patients_controller.rb:
</span><span class='line'>Class Patientcontroller &lt; ApplicationController
</span><span class='line'>  def exportservice
</span><span class='line'>    puts “export executed”  
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Spring
   Given link:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href = ‘/dbo/patient/export.html’&gt; Export_link &lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>/dbo/patientController.java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/dbo/patient/\*")
</span><span class='line'>public class PatientCOntroller extends AbstractDboController{
</span><span class='line'>  @RequestMapping(value=”export.html”, method=RequestMethod(GET))
</span><span class='line'>  public ModelAndView exportService(){
</span><span class='line'>    System.out.println(‘exported excuted’);
</span><span class='line'>    Return new ModelAndView(“dbo/patient/export.jsp”);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reason2: Database Service - ActiveRecord vs Hibernate
Ruby on Rails</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@patients = Patient.all
</span><span class='line'>@patients.each do |patient|
</span><span class='line'>    return paitent.paient_name
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Spring</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>private DboDaoService dboDaoService;
</span><span class='line'>public String function(){
</span><span class='line'>    return dboDaoService.getPatientService().getPaitent_Name();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Reason3: Model Initialization - Crazy ruby syntax
Ruby on Rails
app/model/patient.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Patient &lt; ActiveRecord :: Base
</span><span class='line'>belongs_to :MRN
</span><span class='line'>  def exportService
</span><span class='line'>    return “activated”
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>app/controller/patients_controller.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts Patient.new.exportService</span></code></pre></td></tr></table></div></figure>


<p>Spring
src/main/java/package/dbo/exporter/patient.java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Service
</span><span class='line'>public class Patient implements PetientService {
</span><span class='line'>    public String exportService(){
</span><span class='line'>        return “activated”;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>src/main/java/package/dbo/exporter/patientService.java:
</span><span class='line'>public interface PatientService{
</span><span class='line'>    public String exportService();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>src/main/java/package//dbo/patientController.java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>private patientService PatientService
</span><span class='line'>
</span><span class='line'>@Controller
</span><span class='line'>@RequestMapping(“/dbo/patient/\*”)
</span><span class='line'>public class PatientCOntroller extends AbstractDboController{
</span><span class='line'>  @RequestMapping(value=”export.html”, method=RequestMethod(GET))
</span><span class='line'>  public ModelAndView exportService(){
</span><span class='line'>    System.out.println(patientService.exportService());
</span><span class='line'>    Return new ModelAndView(“dbo/patient/export.jsp”);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
